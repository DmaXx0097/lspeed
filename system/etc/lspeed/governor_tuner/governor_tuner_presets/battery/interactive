#!/system/bin/sh

########
#PATHS #
########
# Path where logs and setup is stored
LSPEED_DATA_DIR=/data/lspeed
LOG_DIR=$LSPEED_DATA_DIR/log
LOG=$LOG_DIR/main_log.log

# Path for executables and busybox
LSPEED=/system/etc/lspeed
BINARY_DIR=$LSPEED/binary
BUSYBOX=$BINARY_DIR/busybox

sendToLog() {
timeZone=$(getprop persist.sys.timezone)
printDate=$(TZ="$timeZone" $BUSYBOX date +"%H:%M:%S:%3N %d-%m-%Y")

echo "[$printDate] $1" >> $LOG
}

write() {
	#chmod 0644 "$1"
    echo "$2" > "$1"
}

lockFile() {
	chmod 0644 "$1"
    echo "$2" > "$1"
	chmod 0444 "$1"
}

if [ $1 = "prime" ]; then 
	if [ -e $2 ]; then
		if [ -e $2/boost ]; then
			lockFile $2/boost "0"
			sendToLog "boost=0"
		fi
	
		if [ -e $2/boostpulse_duration ]; then
			lockFile $2/boostpulse_duration "0"
			sendToLog "boostpulse_duration=0"
		fi
		
		if [ -e $2/fastlane ]; then
			lockFile $2/fastlane "1"
			sendToLog "fastlane=1"
		fi
	
		if [ -e $2/align_windows ]; then
			lockFile $2/align_windows "0"
			sendToLog "align_windows=0"
		fi
	
		if [ -e $2/use_migration_notif ]; then
			lockFile $2/use_migration_notif "1"
			sendToLog "use_migration_notif=1"
		fi
		
		if [ -e $2/use_sched_load ]; then
			lockFile $2/use_sched_load "1"
			sendToLog "use_sched_load=1"
		fi
		
		if [ -e $2/enable_prediction ]; then
			lockFile $2/enable_prediction "0"
			sendToLog "enable_prediction=0"
		fi
		
		if [ -e $2/fast_ramp_down ]; then
			lockFile $2/fast_ramp_down "1"
			sendToLog "fast_ramp_down=1"
		fi
		
		if [ -e $2/go_hispeed_load ]; then
			lockFile $2/go_hispeed_load "99"
			sendToLog "go_hispeed_load=99"
		fi
		
		if [ -e $2/timer_rate ]; then
			lockFile $2/timer_rate "12000"
			sendToLog "timer_rate=12000"
		fi
		
		if [ -e $2/io_is_busy ]; then
			lockFile $2/io_is_busy "0"
			sendToLog "io_is_busy=0"
		fi
		
		if [ -e $2/min_sample_time ]; then
			lockFile $2/min_sample_time "60000"
			sendToLog "min_sample_time=60000"
		fi
	fi

elif [ $1 = "big" ]; then 
	if [ -e $2 ]; then
		if [ -e $2/boost ]; then
			lockFile $2/boost "0"
			sendToLog "boost=0"
		fi
	
		if [ -e $2/boostpulse_duration ]; then
			lockFile $2/boostpulse_duration "0"
			sendToLog "boostpulse_duration=0"
		fi
		
		if [ -e $2/fastlane ]; then
			lockFile $2/fastlane "1"
			sendToLog "fastlane=1"
		fi
	
		if [ -e $2/align_windows ]; then
			lockFile $2/align_windows "0"
			sendToLog "align_windows=0"
		fi
	
		if [ -e $2/use_migration_notif ]; then
			lockFile $2/use_migration_notif "1"
			sendToLog "use_migration_notif=1"
		fi
		
		if [ -e $2/use_sched_load ]; then
			lockFile $2/use_sched_load "1"
			sendToLog "use_sched_load=1"
		fi
		
		if [ -e $2/enable_prediction ]; then
			lockFile $2/enable_prediction "0"
			sendToLog "enable_prediction=0"
		fi
		
		if [ -e $2/fast_ramp_down ]; then
			lockFile $2/fast_ramp_down "1"
			sendToLog "fast_ramp_down=1"
		fi
		
		if [ -e $2/go_hispeed_load ]; then
			lockFile $2/go_hispeed_load "99"
			sendToLog "go_hispeed_load=99"
		fi
		
		if [ -e $2/timer_rate ]; then
			lockFile $2/timer_rate "10000"
			sendToLog "timer_rate=10000"
		fi
		
		if [ -e $2/io_is_busy ]; then
			lockFile $2/io_is_busy "0"
			sendToLog "io_is_busy=0"
		fi
		
		if [ -e $2/min_sample_time ]; then
			lockFile $2/min_sample_time "40000"
			sendToLog "min_sample_time=40000"
		fi
	fi

elif [ $1 = "little" ]; then 
	if [ -e $2 ]; then
		if [ -e $2/boost ]; then
			lockFile $2/boost "0"
			sendToLog "boost=0"
		fi
	
		if [ -e $2/boostpulse_duration ]; then
			lockFile $2/boostpulse_duration "0"
			sendToLog "boostpulse_duration=0"
		fi
		
		if [ -e $2/fastlane ]; then
			lockFile $2/fastlane "1"
			sendToLog "fastlane=1"
		fi
	
		if [ -e $2/align_windows ]; then
			lockFile $2/align_windows "0"
			sendToLog "align_windows=0"
		fi
	
		if [ -e $2/use_migration_notif ]; then
			lockFile $2/use_migration_notif "1"
			sendToLog "use_migration_notif=1"
		fi
		
		if [ -e $2/use_sched_load ]; then
			lockFile $2/use_sched_load "1"
			sendToLog "use_sched_load=1"
		fi
		
		if [ -e $2/enable_prediction ]; then
			lockFile $2/enable_prediction "0"
			sendToLog "enable_prediction=0"
		fi
		
		if [ -e $2/fast_ramp_down ]; then
			lockFile $2/fast_ramp_down "1"
			sendToLog "fast_ramp_down=1"
		fi
		
		if [ -e $2/go_hispeed_load ]; then
			lockFile $2/go_hispeed_load "95"
			sendToLog "go_hispeed_load=95"
		fi
		
		if [ -e $2/timer_rate ]; then
			lockFile $2/timer_rate "10000"
			sendToLog "timer_rate=10000"
		fi
		
		if [ -e $2/io_is_busy ]; then
			lockFile $2/io_is_busy "0"
			sendToLog "io_is_busy=0"
		fi
		
		if [ -e $2/min_sample_time ]; then
			lockFile $2/min_sample_time "40000"
			sendToLog "min_sample_time=40000"
		fi
	fi

elif [ $1 = "regular" ]; then 
	if [ -e $2 ]; then
		if [ -e $2/boost ]; then
			lockFile $2/boost "0"
			sendToLog "boost=0"
		fi
	
		if [ -e $2/boostpulse_duration ]; then
			lockFile $2/boostpulse_duration "0"
			sendToLog "boostpulse_duration=0"
		fi
		
		if [ -e $2/fastlane ]; then
			lockFile $2/fastlane "1"
			sendToLog "fastlane=1"
		fi
	
		if [ -e $2/align_windows ]; then
			lockFile $2/align_windows "0"
			sendToLog "align_windows=0"
		fi
	
		if [ -e $2/use_migration_notif ]; then
			lockFile $2/use_migration_notif "1"
			sendToLog "use_migration_notif=1"
		fi
		
		if [ -e $2/use_sched_load ]; then
			lockFile $2/use_sched_load "1"
			sendToLog "use_sched_load=1"
		fi
		
		if [ -e $2/enable_prediction ]; then
			lockFile $2/enable_prediction "0"
			sendToLog "enable_prediction=0"
		fi
		
		if [ -e $2/fast_ramp_down ]; then
			lockFile $2/fast_ramp_down "1"
			sendToLog "fast_ramp_down=1"
		fi
		
		if [ -e $2/go_hispeed_load ]; then
			lockFile $2/go_hispeed_load "99"
			sendToLog "go_hispeed_load=99"
		fi
		
		if [ -e $2/timer_rate ]; then
			lockFile $2/timer_rate "10000"
			sendToLog "timer_rate=10000"
		fi
		
		if [ -e $2/io_is_busy ]; then
			lockFile $2/io_is_busy "0"
			sendToLog "io_is_busy=0"
		fi
		
		if [ -e $2/min_sample_time ]; then
			lockFile $2/min_sample_time "40000"
			sendToLog "min_sample_time=40000"
		fi
	fi

fi
