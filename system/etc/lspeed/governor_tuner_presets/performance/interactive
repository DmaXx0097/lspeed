#!/system/bin/sh

########
#PATHS #
########
# Path where logs and setup is stored
LSPEED_DATA_DIR="$1"
LOG_DIR=$LSPEED_DATA_DIR/log
LOG=$LOG_DIR/main_log.log

# Path for executables and busybox
BINARY_DIR=$LSPEED_DATA_DIR/binary
BUSYBOX=$BINARY_DIR/busybox

sendToLog() {
timeZone=$(getprop persist.sys.timezone)
printDate=$(TZ="$timeZone" $BUSYBOX date +"%H:%M:%S:%3N %d-%m-%Y")

echo "[$printDate] $1" >> $LOG
}

write() {
	#chmod 0644 "$1"
    echo "$2" > "$1"
}

lockFile() {
	chmod 0644 "$1"
    echo "$2" > "$1"
	chmod 0444 "$1"
}

if [ $2 = "prime" ]; then 
	if [ -e $3 ]; then
		if [ -e $3/boost ]; then
			lockFile $3/boost "0"
			sendToLog "boost=0"
		fi
	
		if [ -e $3/boostpulse_duration ]; then
			lockFile $3/boostpulse_duration "0"
			sendToLog "boostpulse_duration=0"
		fi
		
		if [ -e $3/fastlane ]; then
			lockFile $3/fastlane "1"
			sendToLog "fastlane=1"
		fi
	
		if [ -e $3/align_windows ]; then
			lockFile $3/align_windows "0"
			sendToLog "align_windows=0"
		fi
	
		if [ -e $3/use_migration_notif ]; then
			lockFile $3/use_migration_notif "1"
			sendToLog "use_migration_notif=1"
		fi
		
		if [ -e $3/use_sched_load ]; then
			lockFile $3/use_sched_load "1"
			sendToLog "use_sched_load=1"
		fi
		
		if [ -e $3/enable_prediction ]; then
			lockFile $3/enable_prediction "0"
			sendToLog "enable_prediction=0"
		fi
		
		if [ -e $3/fast_ramp_down ]; then
			lockFile $3/fast_ramp_down "1"
			sendToLog "fast_ramp_down=1"
		fi
		
		if [ -e $3/go_hispeed_load ]; then
			lockFile $3/go_hispeed_load "85"
			sendToLog "go_hispeed_load=85"
		fi
		
		if [ -e $3/timer_rate ]; then
			lockFile $3/timer_rate "12000"
			sendToLog "timer_rate=12000"
		fi
		
		if [ -e $3/io_is_busy ]; then
			lockFile $3/io_is_busy "0"
			sendToLog "io_is_busy=0"
		fi
		
		if [ -e $3/min_sample_time ]; then
			lockFile $3/min_sample_time "60000"
			sendToLog "min_sample_time=60000"
		fi
	fi

elif [ $2 = "big" ]; then 
	if [ -e $3 ]; then
		if [ -e $3/boost ]; then
			lockFile $3/boost "0"
			sendToLog "boost=0"
		fi
	
		if [ -e $3/boostpulse_duration ]; then
			lockFile $3/boostpulse_duration "0"
			sendToLog "boostpulse_duration=0"
		fi
		
		if [ -e $3/fastlane ]; then
			lockFile $3/fastlane "1"
			sendToLog "fastlane=1"
		fi
	
		if [ -e $3/align_windows ]; then
			lockFile $3/align_windows "0"
			sendToLog "align_windows=0"
		fi
	
		if [ -e $3/use_migration_notif ]; then
			lockFile $3/use_migration_notif "1"
			sendToLog "use_migration_notif=1"
		fi
		
		if [ -e $3/use_sched_load ]; then
			lockFile $3/use_sched_load "1"
			sendToLog "use_sched_load=1"
		fi
		
		if [ -e $3/enable_prediction ]; then
			lockFile $3/enable_prediction "0"
			sendToLog "enable_prediction=0"
		fi
		
		if [ -e $3/fast_ramp_down ]; then
			lockFile $3/fast_ramp_down "1"
			sendToLog "fast_ramp_down=1"
		fi
		
		if [ -e $3/go_hispeed_load ]; then
			lockFile $3/go_hispeed_load "90"
			sendToLog "go_hispeed_load=90"
		fi
		
		if [ -e $3/timer_rate ]; then
			lockFile $3/timer_rate "10000"
			sendToLog "timer_rate=10000"
		fi
		
		if [ -e $3/io_is_busy ]; then
			lockFile $3/io_is_busy "0"
			sendToLog "io_is_busy=0"
		fi
		
		if [ -e $3/min_sample_time ]; then
			lockFile $3/min_sample_time "40000"
			sendToLog "min_sample_time=40000"
		fi
	fi

elif [ $2 = "little" ]; then 
	if [ -e $3 ]; then
		if [ -e $3/boost ]; then
			lockFile $3/boost "0"
			sendToLog "boost=0"
		fi
	
		if [ -e $3/boostpulse_duration ]; then
			lockFile $3/boostpulse_duration "0"
			sendToLog "boostpulse_duration=0"
		fi
		
		if [ -e $3/fastlane ]; then
			lockFile $3/fastlane "1"
			sendToLog "fastlane=1"
		fi
	
		if [ -e $3/align_windows ]; then
			lockFile $3/align_windows "0"
			sendToLog "align_windows=0"
		fi
	
		if [ -e $3/use_migration_notif ]; then
			lockFile $3/use_migration_notif "1"
			sendToLog "use_migration_notif=1"
		fi
		
		if [ -e $3/use_sched_load ]; then
			lockFile $3/use_sched_load "1"
			sendToLog "use_sched_load=1"
		fi
		
		if [ -e $3/enable_prediction ]; then
			lockFile $3/enable_prediction "0"
			sendToLog "enable_prediction=0"
		fi
		
		if [ -e $3/fast_ramp_down ]; then
			lockFile $3/fast_ramp_down "1"
			sendToLog "fast_ramp_down=1"
		fi
		
		if [ -e $3/go_hispeed_load ]; then
			lockFile $3/go_hispeed_load "90"
			sendToLog "go_hispeed_load=90"
		fi
		
		if [ -e $3/timer_rate ]; then
			lockFile $3/timer_rate "10000"
			sendToLog "timer_rate=10000"
		fi
		
		if [ -e $3/io_is_busy ]; then
			lockFile $3/io_is_busy "0"
			sendToLog "io_is_busy=0"
		fi
		
		if [ -e $3/min_sample_time ]; then
			lockFile $3/min_sample_time "40000"
			sendToLog "min_sample_time=40000"
		fi
	fi

elif [ $2 = "regular" ]; then 
	if [ -e $3 ]; then
		if [ -e $3/boost ]; then
			lockFile $3/boost "0"
			sendToLog "boost=0"
		fi
	
		if [ -e $3/boostpulse_duration ]; then
			lockFile $3/boostpulse_duration "0"
			sendToLog "boostpulse_duration=0"
		fi
		
		if [ -e $3/fastlane ]; then
			lockFile $3/fastlane "1"
			sendToLog "fastlane=1"
		fi
	
		if [ -e $3/align_windows ]; then
			lockFile $3/align_windows "0"
			sendToLog "align_windows=0"
		fi
	
		if [ -e $3/use_migration_notif ]; then
			lockFile $3/use_migration_notif "1"
			sendToLog "use_migration_notif=1"
		fi
		
		if [ -e $3/use_sched_load ]; then
			lockFile $3/use_sched_load "1"
			sendToLog "use_sched_load=1"
		fi
		
		if [ -e $3/enable_prediction ]; then
			lockFile $3/enable_prediction "0"
			sendToLog "enable_prediction=0"
		fi
		
		if [ -e $3/fast_ramp_down ]; then
			lockFile $3/fast_ramp_down "1"
			sendToLog "fast_ramp_down=1"
		fi
		
		if [ -e $3/go_hispeed_load ]; then
			lockFile $3/go_hispeed_load "90"
			sendToLog "go_hispeed_load=90"
		fi
		
		if [ -e $3/timer_rate ]; then
			lockFile $3/timer_rate "10000"
			sendToLog "timer_rate=10000"
		fi
		
		if [ -e $3/io_is_busy ]; then
			lockFile $3/io_is_busy "0"
			sendToLog "io_is_busy=0"
		fi
		
		if [ -e $3/min_sample_time ]; then
			lockFile $3/min_sample_time "40000"
			sendToLog "min_sample_time=40000"
		fi
	fi

fi
