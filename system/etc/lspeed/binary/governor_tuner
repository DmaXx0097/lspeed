#!/system/bin/sh
# This is a part of L Speed
# Governor tuner

########
#PATHS #
########
# Path where logs and setup is stored (/data)
LSPEED_DATA_DIR=/data/lspeed
LOG_DIR=$LSPEED_DATA_DIR/log
LOG=$LOG_DIR/main_log.log

SETUP_DIR=$LSPEED_DATA_DIR/setup
USER_PROFILE=$SETUP_DIR/user_profile
PROFILE=$SETUP_DIR/profile

# governor_tuner config files
GOVERNOR_TUNER_DATA_DIR=$SETUP_DIR/governor_tuner
MIN_MAX_FREQ=$GOVERNOR_TUNER_DATA_DIR/min_max_freq
MIN_FREQ_LIST=$GOVERNOR_TUNER_DATA_DIR/min_freq_list
MAX_FREQ_LIST=$GOVERNOR_TUNER_DATA_DIR/max_freq_list
LOGICAL_CORE=$GOVERNOR_TUNER_DATA_DIR/logical_core
UNIQUE_FREQ=$GOVERNOR_TUNER_DATA_DIR/unique_freq
CORE_GETTER=$GOVERNOR_TUNER_DATA_DIR/core_getter

# Path in /system dir
LSPEED=/system/etc/lspeed
GOVERNOR_TUNER_DIR=$LSPEED/governor_tuner
BUSYBOX=$LSPEED/binary/busybox
GOVERNOR_TUNER_PRESETS=$GOVERNOR_TUNER_DIR/governor_tuner_presets

divider="==============================================="

# Functions
createFile() {
    touch "$1"
    chmod 0666 "$1"
}

sendToLog() {
timeZone=$(getprop persist.sys.timezone)
printDate=$(TZ="$timeZone" $BUSYBOX date +"%H:%M:%S:%3N %d-%m-%Y")

echo "[$printDate] $1" >> $LOG
}

write() {
	#chmod 0644 "$1"
    echo "$2" > "$1"
}

lockFile() {
	chmod 0644 "$1"
    echo "$2" > "$1"
	chmod 0444 "$1"
}

# Create governor_tuner dir if not exists
if [ ! -d $GOVERNOR_TUNER_DATA_DIR ]; then
	mkdir -p $GOVERNOR_TUNER_DATA_DIR
fi;

# Wait for main process to finish, we don't want logs overlaping
waitMainProcess() {
	if [ -s $LSPEED_DATA_DIR/lspeed_main_PID ]; then
		proc1=$($BUSYBOX cat $LSPEED_DATA_DIR/lspeed_main_PID)
		proc2=$(ps | $BUSYBOX grep "$proc1" | $BUSYBOX head -n 1 | $BUSYBOX tr -s ' ' | $BUSYBOX cut -d ' ' -f2)
		
		while [ $proc1 -eq $proc2 ]; do
			
			proc2=$(ps | $BUSYBOX grep "$proc1" | $BUSYBOX head -n 1 | $BUSYBOX tr -s ' ' | $BUSYBOX cut -d ' ' -f2)
			
			if	[ $proc1 -eq $proc2 ]; then
				sendToLog "$divider"
				sendToLog "governor_tuner waiting for lspeed_main($proc1) to finish the job"
				sendToLog "$divider"
				sleep 5;
			else
				sendToLog "$divider"
				sendToLog "lspeed_main finished the job, governor_tuner proceeding..."
				sendToLog "$divider"
				sleep 2;
			fi
		done
	fi
	
	unset proc1; unset proc2;
}
waitMainProcess

# End governor_tuner process if already started.
endProc() {
	if [ -s $GOVERNOR_TUNER_DATA_DIR/governor_tuner_PID ]; then
		proc1=$($BUSYBOX cat $GOVERNOR_TUNER_DATA_DIR/governor_tuner_PID)
		proc2=$(ps | $BUSYBOX grep "$proc1" | $BUSYBOX head -n 1 | $BUSYBOX tr -s ' ' | $BUSYBOX cut -d ' ' -f2)
		if [ "$proc1" -eq "$proc2" ]; then
			kill "$proc1"
			sendToLog "$divider"
			sendToLog "Killing previous governor_tuner process($proc1)"
			sendToLog "$divider"
		fi
	fi
	
	unset proc1; unset proc2;
}
endProc

real_cpu_cores=$($BUSYBOX ls /sys/devices/system/cpu | $BUSYBOX grep -c ^cpu[0-9]);
cpu_cores=$((real_cpu_cores-1));

#######
# Method returns min and max frequencies as list
#######
getMinAndMaxFreq() {
	rm -rf $MIN_MAX_FREQ
	
	core=0
	while [ "$core" -le "$cpu_cores" ]; do

	scalingAvailableFrequencies=/sys/devices/system/cpu/cpu$core/cpufreq/scaling_available_frequencies
	
	if [ -e $scalingAvailableFrequencies ]; then
		minFreq=$($BUSYBOX cat $scalingAvailableFrequencies | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $1}')
		maxFreq=$($BUSYBOX cat $scalingAvailableFrequencies | tr '\n' ' ' | $BUSYBOX awk '{print $NF}')

		if [ $minFreq -lt $maxFreq ]; then
			echo "$minFreq " >> $MIN_MAX_FREQ
			echo "$maxFreq " >> $MIN_MAX_FREQ
		elif [ $minFreq -gt $maxFreq ]; then
			echo "$maxFreq " >> $MIN_MAX_FREQ
			echo "$minFreq " >> $MIN_MAX_FREQ
		fi
	fi

	core=$(( core + 1 ))
	done
	
	sleep 0.5
	
	unset core; unset scalingAvailableFrequencies; unset minFreq; unset maxFreq;
}

#######
# Method returns Min frequency of LITTLE, MIDDLE AND BIG cores,
# also REGULAR frequency in a list taking min_max_freq list as argument
#######
getMinFreqList() {
	rm -rf $MIN_FREQ_LIST
	
	minMaxFreqSize=$($BUSYBOX cat $MIN_MAX_FREQ | $BUSYBOX tr '\n' ' ' | $BUSYBOX wc -w)

	i=1
	while [ $i -le $minMaxFreqSize ]; do
		
		minFreqList=$($BUSYBOX cat $MIN_MAX_FREQ | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$i'}')

		echo "$minFreqList " >> $MIN_FREQ_LIST

		i=$(( i + 2 ))
	done

	sleep 0.5

	unset minMaxFreqSize; unset i; unset minFreqList;
}

#######
# Method returns Max frequency of LITTLE, MIDDLE AND BIG cores,
# also REGULAR frequency in a list taking min_max_freq list as argument
#######
getMaxFreqList() {
	rm -rf $MAX_FREQ_LIST
	
	minMaxFreqSize=$($BUSYBOX cat $MIN_MAX_FREQ | $BUSYBOX tr '\n' ' ' | $BUSYBOX wc -w)

	i=2
	while [ $i -le $minMaxFreqSize ]; do
		
		maxFreqList=$($BUSYBOX cat $MIN_MAX_FREQ | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$i'}')

		echo "$maxFreqList " >> $MAX_FREQ_LIST

		i=$(( i + 2 ))
	done
	
	sleep 0.5
	
	unset minMaxFreqSize; unset i; unset maxFreqList;
}

#######
#Logical cores detect the parent core of the cluster
#######
logicalCores() {
	rm -rf $LOGICAL_CORE
	
	maxFreqListSize=$($BUSYBOX cat $MAX_FREQ_LIST | $BUSYBOX tr '\n' ' ' | $BUSYBOX wc -w)

	if [ $maxFreqListSize -ge 1 ]; then
		i=1
		
		# Core 0 is always on
		echo "0 " >> $LOGICAL_CORE
		
		while [ $i -le $((maxFreqListSize)) ]; do
				
			if [ $((i + 1)) -le $maxFreqListSize ]; then
				maxFreqList=$($BUSYBOX cat $MAX_FREQ_LIST | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$i'}')
				nextMaxFreqList=$($BUSYBOX cat $MAX_FREQ_LIST | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$((i+1))'}')

				if [ "$maxFreqList" != "$nextMaxFreqList" ]; then
					echo "$i " >> $LOGICAL_CORE
				fi
			fi
			i=$(( i + 1 ))
		done
	fi
	
	sleep 0.5

	unset maxFreqListSize; unset i; unset maxFreqList; unset nextMaxFreqList;
}

##########
# Lets create a Integer list containing non-repeating values of max_frequency
##########
getUniqueFreq() {
	rm -rf $UNIQUE_FREQ
	
	sleep 0.2
	
	$BUSYBOX cat $MAX_FREQ_LIST | $BUSYBOX tr ' ' '\n' | $BUSYBOX sort -n -r | $BUSYBOX uniq > $UNIQUE_FREQ
	
	sleep 0.5
}

##########
# coreGetter returns a list with parent core of clusters in descending order BIG to LITTLE
##########
coreGetter() {

rm -rf $CORE_GETTER
big=0
middle=0
little=0

logicalCoresListSize=$($BUSYBOX cat $LOGICAL_CORE | $BUSYBOX tr '\n' ' ' | $BUSYBOX wc -w)

if [ $logicalCoresListSize -eq 3 ]; then
	a=1
	while [ $a -le $((logicalCoresListSize)) ]; do
	    logicalCore=$($BUSYBOX cat $LOGICAL_CORE | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$a'}')
				
		uniqueFreq=$($BUSYBOX cat $UNIQUE_FREQ | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $1}')
		maxFreqList=$($BUSYBOX cat $MAX_FREQ_LIST | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$((logicalCore+1))'}')
		
		if [ $uniqueFreq -eq $maxFreqList ]; then
			big=$($BUSYBOX cat $LOGICAL_CORE | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$a'}')
		fi
			
		a=$(( a + 1 ))
	done
	
	echo "$big " >> $CORE_GETTER
	
	echo "Big cpu core is $big"
	
	unset logicalCore; unset uniqueFreq; unset maxFreqList;
	
	b=1
	while [ $a -le $((logicalCoresListSize)) ]; do
		logicalCore=$($BUSYBOX cat $LOGICAL_CORE | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$b'}')
				
        uniqueFreq=$($BUSYBOX cat $UNIQUE_FREQ | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $2}')
		maxFreqList=$($BUSYBOX cat $MAX_FREQ_LIST | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$((logicalCore+1))'}')
		
		if [ $uniqueFreq -eq $maxFreqList ]; then
			moddle=$($BUSYBOX cat $LOGICAL_CORE | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$b'}')
		fi
			
		b=$(( b + 1 ))
	done
	
	echo "$middle " >> $CORE_GETTER
	
	echo "Middle cpu core is $middle"
	
	unset logicalCore; unset uniqueFreq; unset maxFreqList;
	
	c=1
	while [ $c -le $((logicalCoresListSize)) ]; do
		uniqueFreq=$($BUSYBOX cat $UNIQUE_FREQ | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $1}')
		maxFreqList=$($BUSYBOX cat $MAX_FREQ_LIST | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$((logicalCore+1))'}')
		
		if [ $uniqueFreq -eq $maxFreqList ]; then
			little=$($BUSYBOX cat $LOGICAL_CORE | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$c'}')
		fi
			
		c=$(( c + 1 ))
	done
	
	echo "$little " >> $CORE_GETTER
	
	echo "Little cpu core is $little"
	
	unset logicalCore; unset uniqueFreq; unset maxFreqList;

elif [ $logicalCoresListSize -eq 2 ]; then
	a=1
	while [ $a -le $((logicalCoresListSize)) ]; do
	    logicalCore=$($BUSYBOX cat $LOGICAL_CORE | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$a'}')
				
		uniqueFreq=$($BUSYBOX cat $UNIQUE_FREQ | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $1}')
		maxFreqList=$($BUSYBOX cat $MAX_FREQ_LIST | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$((logicalCore+1))'}')
		
		if [ $uniqueFreq -eq $maxFreqList ]; then
			big=$($BUSYBOX cat $LOGICAL_CORE | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$a'}')
		fi
			
		a=$(( a + 1 ))
	done
	
	echo "$big " >> $CORE_GETTER
	
	echo "Big cpu core is $big"
	
	unset logicalCore; unset uniqueFreq; unset maxFreqList;
	
	c=1
	while [ $c -le $((logicalCoresListSize)) ]; do
		uniqueFreq=$($BUSYBOX cat $UNIQUE_FREQ | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $1}')
		maxFreqList=$($BUSYBOX cat $MAX_FREQ_LIST | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$((logicalCore+1))'}')
		
		if [ $uniqueFreq -eq $maxFreqList ]; then
			little=$($BUSYBOX cat $LOGICAL_CORE | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$c'}')
		fi
			
		c=$(( c + 1 ))
	done
	
	echo "$little " >> $CORE_GETTER
	
	echo "Little cpu core is $little"
	
	unset uniqueFreq; unset maxFreqList;
else

	echo "0" >> $CORE_GETTER
	
	echo "Device have regular CPU"
fi

sleep 3
}

getMinAndMaxFreq
getMinFreqList
getMaxFreqList
logicalCores
getUniqueFreq
coreGetter

applyParameters() {

if [ "$#" -gt 0 ]; then

	coreGetterListSize=$($BUSYBOX cat $CORE_GETTER | $BUSYBOX tr '\n' ' ' | $BUSYBOX wc -w)

	sendToLog "Applying $1 profile"
	sendToLog "Governor tuner found $coreGetterListSize main CPU cores"

	if [ $coreGetterListSize -eq 3 ]; then
		
		#
		# BIG Cluster
		#
		getCore=$($BUSYBOX cat $CORE_GETTER | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $1}')
		getCurrentGovernor=$($BUSYBOX cat /sys/devices/system/cpu/cpu$getCore/cpufreq/scaling_governor)
		clusterGovernorPath="/sys/devices/system/cpu/cpu$getCore/cpufreq/$getCurrentGovernor"
		
		sendToLog "First one is BIG located on cpu$getCore"
		sendToLog "Current governor on BIG: $getCurrentGovernor"
		
		if [ -e $GOVERNOR_TUNER_PRESETS/$1/$getCurrentGovernor ]; then
			sendToLog "Changing governor parameters"
			sh $GOVERNOR_TUNER_PRESETS/$1/$getCurrentGovernor "big" $clusterGovernorPath
			sendToLog "Governor parameters successfully changed"
		else
			sendToLog "Governor $getCurrentGovernor is not supported"
		fi
		
		sendToLog "$divider"
		unset getCore; unset getCurrentGovernor; unset clusterGovernorPath;
		
		#
		# MIDDLE Cluster
		#
		getCore=$($BUSYBOX cat $CORE_GETTER | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $2}')
		getCurrentGovernor=$($BUSYBOX cat /sys/devices/system/cpu/cpu$getCore/cpufreq/scaling_governor)
		clusterGovernorPath="/sys/devices/system/cpu/cpu$getCore/cpufreq/$getCurrentGovernor"
		
		sendToLog "Second one is MIDDLE located on cpu$getCore"
		sendToLog "Current governor on MIDDLE: $getCurrentGovernor"
		
		if [ -e $GOVERNOR_TUNER_PRESETS/$1/$getCurrentGovernor ]; then
			sendToLog "Changing governor parameters"
			sh $GOVERNOR_TUNER_PRESETS/$1/$getCurrentGovernor "middle" $clusterGovernorPath
			sendToLog "Governor parameters successfully changed"
		else
			sendToLog "Governor $getCurrentGovernor is not supported"
		fi
		
		sendToLog "$divider"
		unset getCore; unset getCurrentGovernor; unset clusterGovernorPath;
		
		#
		# LITTLE Cluster
		#
		getCore=$($BUSYBOX cat $CORE_GETTER | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $3}')
		getCurrentGovernor=$($BUSYBOX cat /sys/devices/system/cpu/cpu$getCore/cpufreq/scaling_governor)
		clusterGovernorPath="/sys/devices/system/cpu/cpu$getCore/cpufreq/$getCurrentGovernor"
		
		sendToLog "Third one is LITTLE located on cpu$getCore"
		sendToLog "Current governor on LITTLE: $getCurrentGovernor"
		
		if [ -e $GOVERNOR_TUNER_PRESETS/$1/$getCurrentGovernor ]; then
			sendToLog "Changing governor parameters"
			sh $GOVERNOR_TUNER_PRESETS/$1/$getCurrentGovernor "little" $clusterGovernorPath
			sendToLog "Governor parameters successfully changed"
		else
			sendToLog "Governor $getCurrentGovernor is not supported"
		fi
		
		sendToLog "$divider"
		unset getCore; unset getCurrentGovernor; unset clusterGovernorPath;
	elif [ $coreGetterListSize -eq 2 ]; then

		#
		# BIG Cluster
		#
		getCore=$($BUSYBOX cat $CORE_GETTER | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $1}')
		getCurrentGovernor=$($BUSYBOX cat /sys/devices/system/cpu/cpu$getCore/cpufreq/scaling_governor)
		clusterGovernorPath="/sys/devices/system/cpu/cpu$getCore/cpufreq/$getCurrentGovernor"

		sendToLog "First one is BIG located on cpu$getCore"
		sendToLog "Current governor on BIG: $getCurrentGovernor"
		
		if [ -e $GOVERNOR_TUNER_PRESETS/$1/$getCurrentGovernor ]; then
			sendToLog "Changing governor parameters"
			sh $GOVERNOR_TUNER_PRESETS/$1/$getCurrentGovernor "big" $clusterGovernorPath
			sendToLog "Governor parameters successfully changed"
		else
			sendToLog "Governor $getCurrentGovernor is not supported"
		fi
		
		sendToLog "$divider"
		unset getCore; unset getCurrentGovernor; unset clusterGovernorPath;
		#
		# LITTLE Cluster
		#
		getCore=$($BUSYBOX cat $CORE_GETTER | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $2}')
		getCurrentGovernor=$($BUSYBOX cat /sys/devices/system/cpu/cpu$getCore/cpufreq/scaling_governor)
		clusterGovernorPath="/sys/devices/system/cpu/cpu$getCore/cpufreq/$getCurrentGovernor"
		
		sendToLog "Second one is LITTLE located on cpu$getCore"
		sendToLog "Current governor on LITTLE: $getCurrentGovernor"
		
		if [ -e $GOVERNOR_TUNER_PRESETS/$1/$getCurrentGovernor ]; then
			sendToLog "Changing governor parameters"
			sh $GOVERNOR_TUNER_PRESETS/$1/$getCurrentGovernor "little" $clusterGovernorPath
			sendToLog "Governor parameters successfully changed"
		else
			sendToLog "Governor $getCurrentGovernor is not supported"
		fi
		
		sendToLog "$divider"
		unset getCore; unset getCurrentGovernor; unset clusterGovernorPath;
	else
		#
		# REGULAR CPU
		#
		getCurrentGovernor=$($BUSYBOX cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)
		regularGovernorPath="/sys/devices/system/cpu/cpufreq/$getCurrentGovernor"
		
		sendToLog "REGULAR CPU located on cpu0"
		sendToLog "Current governor on REGULAR: $getCurrentGovernor"
		sendToLog "Governor path: $regularGovernorPath"
		
		if [ -e $GOVERNOR_TUNER_PRESETS/$1/$getCurrentGovernor ]; then
			sendToLog "Changing governor parameters"
			sh $GOVERNOR_TUNER_PRESETS/$1/$getCurrentGovernor "regular" $regularGovernorPath
			sendToLog "Governor parameters successfully changed"
		else
			sendToLog "Governor $getCurrentGovernor is not supported"
		fi
		
		sendToLog "$divider"
		unset getCurrentGovernor; unset regularGovernorPath;
	fi
fi
}

while true; do
	getProfile=$($BUSYBOX cat $USER_PROFILE/governor_tuner) 2>/dev/null

	if [ "$getProfile" -eq 1 ] || [ "getProfile" -eq 2 ] || [ "getProfile" -eq 3 ]; then
		write $GOVERNOR_TUNER_DATA_DIR/governor_tuner_PID $$
	else
		sendToLog "Cannot reteive current profile"
		exit 0
	fi

	# Execute profiles for selected profile
	if [ "$getProfile" -eq 1 ]; then
		profile="battery";
		
	elif [ "$getProfile" -eq 2 ]; then
		profile="balanced";
		
	elif [ "$getProfile" -eq 3 ]; then
		profile="performance";
		
	else
		profile=""
	fi

	applyParameters $profile

	sleep 300;

done