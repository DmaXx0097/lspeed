#!/system/bin/sh
# This is a part of L Speed
# CPU detection

########
#PATHS #
########
# Path where logs and setup is stored (/data)
LSPEED_DATA_DIR=/data/lspeed
SETUP_DIR=$LSPEED_DATA_DIR/setup

# cpu_detect output files
CPU_DETECT_DATA_DIR=$SETUP_DIR/cpu_detect
REAL_CPU_CORE_COUNT=$CPU_DETECT_DATA_DIR/real_cpu_core_count
MIN_MAX_FREQ=$CPU_DETECT_DATA_DIR/min_max_freq
MIN_FREQ_LIST=$CPU_DETECT_DATA_DIR/min_freq_list
MAX_FREQ_LIST=$CPU_DETECT_DATA_DIR/max_freq_list
LOGICAL_CORE=$CPU_DETECT_DATA_DIR/logical_core
AFFECTED_CPU=$CPU_DETECT_DATA_DIR/affected_cpu
UNIQUE_FREQ=$CPU_DETECT_DATA_DIR/unique_freq
CORE_GETTER=$CPU_DETECT_DATA_DIR/core_getter
CPU_CORE_COUNT=$CPU_DETECT_DATA_DIR/cpu_core_count
PRIME_CORES_COUNT=$CPU_DETECT_DATA_DIR/prime_cores_count
BIG_CORES_COUNT=$CPU_DETECT_DATA_DIR/big_cores_count
LITTLE_CORES_COUNT=$CPU_DETECT_DATA_DIR/little_cores_count

# Path in /system dir
LSPEED=/system/etc/lspeed
BUSYBOX=$LSPEED/binary/busybox

# Create cpu_detect dir if not exists
if [ ! -d $CPU_DETECT_DATA_DIR ]; then
	mkdir -p $CPU_DETECT_DATA_DIR
fi;	

#######
# Method returns the numbers of CPU cores
#######
getCPUcoreCount() {
	rm -rf $CPU_CORE_COUNT
	rm -rf $REAL_CPU_CORE_COUNT
	
	real_cpu_cores=$($BUSYBOX ls /sys/devices/system/cpu | $BUSYBOX grep -c ^cpu[0-9]);
	cpu_cores=$((real_cpu_cores-1));
	
	echo "$cpu_cores" > $CPU_CORE_COUNT
	echo "$real_cpu_cores" > $REAL_CPU_CORE_COUNT
	
	sleep 0.5
	
	unset real_cpu_cores; unset cpu_cores;
}

#######
# Method returns min and max frequencies as list
#######
getMinAndMaxFreq() {
	rm -rf $MIN_MAX_FREQ
	
	core_count=$($BUSYBOX cat $CPU_CORE_COUNT)
	core=0
	while [ $core -le "$core_count" ]; do

	scalingAvailableFrequencies=/sys/devices/system/cpu/cpu$core/cpufreq/scaling_available_frequencies
	
		if [ -e $scalingAvailableFrequencies ]; then
			minFreq=$($BUSYBOX cat $scalingAvailableFrequencies | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $1}')
			maxFreq=$($BUSYBOX cat $scalingAvailableFrequencies | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $NF}')

			if [ "$minFreq" -lt "$maxFreq" ]; then
				echo "$minFreq " >> $MIN_MAX_FREQ
				echo "$maxFreq " >> $MIN_MAX_FREQ
			elif [ "$minFreq" -gt "$maxFreq" ]; then
				echo "$maxFreq " >> $MIN_MAX_FREQ
				echo "$minFreq " >> $MIN_MAX_FREQ
			fi
		fi
		
		core=$(( core + 1 ))
	done
	
	unset core; unset scalingAvailableFrequencies; unset minFreq; unset maxFreq;
	
	# This is for devices with mp-cpufreq dir
	if [ ! -e /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies ]; then
		rm -rf $MIN_MAX_FREQ
		
		cluster0FreqTable=/sys/devices/system/cpu/cpufreq/mp-cpufreq/cluster0_freq_table
		cluster1FreqTable=/sys/devices/system/cpu/cpufreq/mp-cpufreq/cluster1_freq_table
		cluster2FreqTable=/sys/devices/system/cpu/cpufreq/mp-cpufreq/cluster2_freq_table
		kfcFreqTable=/sys/devices/system/cpu/cpufreq/mp-cpufreq/kfc_freq_table
		cpuFreqTable=/sys/devices/system/cpu/cpufreq/mp-cpufreq/cpu_freq_table
		
		if [ -e $cluster0FreqTable ]; then
			minFreq=$($BUSYBOX cat $cluster0FreqTable | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $1}')
			maxFreq=$($BUSYBOX cat $cluster0FreqTable | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $NF}')

			if [ "$minFreq" -lt "$maxFreq" ]; then
				echo "$minFreq " >> $MIN_MAX_FREQ
				echo "$maxFreq " >> $MIN_MAX_FREQ
			elif [ "$minFreq" -gt "$maxFreq" ]; then
				echo "$maxFreq " >> $MIN_MAX_FREQ
				echo "$minFreq " >> $MIN_MAX_FREQ
			fi
		fi
		unset minFreq; unset maxFreq;
		
		if [ -e $cluster1FreqTable ]; then
			minFreq=$($BUSYBOX cat $cluster1FreqTable | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $1}')
			maxFreq=$($BUSYBOX cat $cluster1FreqTable | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $NF}')

			if [ "$minFreq" -lt "$maxFreq" ]; then
				echo "$minFreq " >> $MIN_MAX_FREQ
				echo "$maxFreq " >> $MIN_MAX_FREQ
			elif [ "$minFreq" -gt "$maxFreq" ]; then
				echo "$maxFreq " >> $MIN_MAX_FREQ
				echo "$minFreq " >> $MIN_MAX_FREQ
			fi
		fi
		unset minFreq; unset maxFreq;
		
		if [ -e $cluster2FreqTable ]; then
			minFreq=$($BUSYBOX cat $cluster2FreqTable | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $1}')
			maxFreq=$($BUSYBOX cat $cluster2FreqTable | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $NF}')

			if [ "$minFreq" -lt "$maxFreq" ]; then
				echo "$minFreq " >> $MIN_MAX_FREQ
				echo "$maxFreq " >> $MIN_MAX_FREQ
			elif [ "$minFreq" -gt "$maxFreq" ]; then
				echo "$maxFreq " >> $MIN_MAX_FREQ
				echo "$minFreq " >> $MIN_MAX_FREQ
			fi
		fi
		unset minFreq; unset maxFreq;
		
		if [ -e $kfcFreqTable ]; then
			minFreq=$($BUSYBOX cat $kfcFreqTable | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $1}')
			maxFreq=$($BUSYBOX cat $kfcFreqTable | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $NF}')

			if [ "$minFreq" -lt "$maxFreq" ]; then
				echo "$minFreq " >> $MIN_MAX_FREQ
				echo "$maxFreq " >> $MIN_MAX_FREQ
			elif [ "$minFreq" -gt "$maxFreq" ]; then
				echo "$maxFreq " >> $MIN_MAX_FREQ
				echo "$minFreq " >> $MIN_MAX_FREQ
			fi
		fi
		unset minFreq; unset maxFreq;
		
		if [ -e $cpuFreqTable ]; then
			minFreq=$($BUSYBOX cat $cpuFreqTable | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $1}')
			maxFreq=$($BUSYBOX cat $cpuFreqTable | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $NF}')

			if [ "$minFreq" -lt "$maxFreq" ]; then
				echo "$minFreq " >> $MIN_MAX_FREQ
				echo "$maxFreq " >> $MIN_MAX_FREQ
			elif [ "$minFreq" -gt "$maxFreq" ]; then
				echo "$maxFreq " >> $MIN_MAX_FREQ
				echo "$minFreq " >> $MIN_MAX_FREQ
			fi
		fi
		unset minFreq; unset maxFreq;
	fi
	
	sleep 0.5
	
	unset cluster0FreqTable; unset cluster1FreqTable; unset cluster2FreqTable; unset kfcFreqTable; unset cpuFreqTable;
}

#######
# Method returns Min frequency of LITTLE, BIG and PRIME cores,
# also REGULAR frequency in a list taking min_max_freq list as argument
#######
getMinFreqList() {
	rm -rf $MIN_FREQ_LIST
	
	minMaxFreqSize=$($BUSYBOX cat $MIN_MAX_FREQ | $BUSYBOX tr '\n' ' ' | $BUSYBOX wc -w)

	i=1
	while [ $i -le "$minMaxFreqSize" ]; do
		
		minFreqList=$($BUSYBOX cat $MIN_MAX_FREQ | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$i'}')

		echo "$minFreqList " >> $MIN_FREQ_LIST

		i=$(( i + 2 ))
	done

	sleep 0.5

	unset minMaxFreqSize; unset i; unset minFreqList;
}

#######
# Method returns Max frequency of LITTLE, BIG and PRIME cores,
# also REGULAR frequency in a list taking min_max_freq list as argument
#######
getMaxFreqList() {
	rm -rf $MAX_FREQ_LIST
	
	minMaxFreqSize=$($BUSYBOX cat $MIN_MAX_FREQ | $BUSYBOX tr '\n' ' ' | $BUSYBOX wc -w)

	i=2
	while [ $i -le "$minMaxFreqSize" ]; do
		
		maxFreqList=$($BUSYBOX cat $MIN_MAX_FREQ | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$i'}')

		echo "$maxFreqList " >> $MAX_FREQ_LIST

		i=$(( i + 2 ))
	done
	
	sleep 0.5
	
	unset minMaxFreqSize; unset i; unset maxFreqList;
}

#######
# Logical cores detect the parent core of the cluster
#######
logicalCores() {
	rm -rf $LOGICAL_CORE
	
	#####
	# Get the logical core over affected cpu list
	#####
	core_count=$($BUSYBOX cat $CPU_CORE_COUNT)
	# Counter
	core=0
	
	# Core 0 is always affected
	echo "0 " > $LOGICAL_CORE
	
	while [ $core -le $core_count ]; do
		affected_cpus=/sys/devices/system/cpu/cpu$core/cpufreq/affected_cpus
	
		if [ -e $affected_cpus ]; then
			getAffectedCPU=$($BUSYBOX cat $affected_cpus | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $1}')
			
			getLastInputAffectedCPU=$($BUSYBOX cat $LOGICAL_CORE | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $NF}')

			if [ ! $getLastInputAffectedCPU -eq $getAffectedCPU ]; then
				echo "$getAffectedCPU " >> $LOGICAL_CORE
			fi
		fi
		
		core=$(( core + 1 ))
	done
	
	sleep 0.5
	
	unset core_count; unset core; unset affected_cpus; unset getAffectedCPU; unset getLastInputAffectedCPU;
}

##########
# Lets create a Integer list containing non-repeating values of max_frequency
##########
getUniqueFreq() {
	rm -rf $UNIQUE_FREQ
	
	sleep 0.2
	
	$BUSYBOX cat $MAX_FREQ_LIST | $BUSYBOX uniq > $UNIQUE_FREQ
	
	sleep 0.5
}

##########
# coreGetter returns a list with parent core of clusters in descending order PRIME to LITTLE
##########
coreGetter() {

rm -rf $CORE_GETTER
	
prime=0
big=0
little=0

logicalCoresListSize=$($BUSYBOX cat $LOGICAL_CORE | $BUSYBOX tr '\n' ' ' | $BUSYBOX wc -w)
uniqueFreqListSize=$($BUSYBOX cat $UNIQUE_FREQ | $BUSYBOX tr '\n' ' ' | $BUSYBOX wc -w)
real_core_count=$($BUSYBOX cat $REAL_CPU_CORE_COUNT)

if [ "$logicalCoresListSize" -eq 3 ] && [ "$uniqueFreqListSize" -eq 3 ]; then

	firtsHighestFreq=$($BUSYBOX cat $UNIQUE_FREQ | $BUSYBOX sort -n | $BUSYBOX tail -1 | $BUSYBOX head -1)
	secondHighestFreq=$($BUSYBOX cat $UNIQUE_FREQ | $BUSYBOX sort -n | $BUSYBOX tail -2 | $BUSYBOX head -1)
	thirdHighestFreq=$($BUSYBOX cat $UNIQUE_FREQ | $BUSYBOX sort -n | $BUSYBOX tail -3 | $BUSYBOX head -1)

	getPrimeCluster="$(grep -n "$firtsHighestFreq" $UNIQUE_FREQ | head -n 1 | cut -d: -f1)"
	getBigCluster="$(grep -n "$secondHighestFreq" $UNIQUE_FREQ | head -n 1 | cut -d: -f1)"
	getLittleCluster="$(grep -n "$thirdHighestFreq" $UNIQUE_FREQ | head -n 1 | cut -d: -f1)"

	prime=$($BUSYBOX cat $LOGICAL_CORE | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$getPrimeCluster'}')
	big=$($BUSYBOX cat $LOGICAL_CORE | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$getBigCluster'}')
	little=$($BUSYBOX cat $LOGICAL_CORE | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$getLittleCluster'}')

	$BUSYBOX printf "$prime\n$big\n$little" > $CORE_GETTER
	

elif [ "$logicalCoresListSize" -eq 2 ] && [ "$uniqueFreqListSize" -eq 2 ]; then

	firtsHighestFreq=$($BUSYBOX cat $UNIQUE_FREQ | $BUSYBOX sort -n | $BUSYBOX tail -1 | $BUSYBOX head -1)
	secondHighestFreq=$($BUSYBOX cat $UNIQUE_FREQ | $BUSYBOX sort -n | $BUSYBOX tail -2 | $BUSYBOX head -1)

	getBigCluster="$($BUSYBOX grep -n "$firtsHighestFreq" $UNIQUE_FREQ | $BUSYBOX head -n 1 | $BUSYBOX cut -d: -f1)"
	getLittleCluster="$($BUSYBOX grep -n "$secondHighestFreq" $UNIQUE_FREQ | $BUSYBOX head -n 1 | $BUSYBOX cut -d: -f1)"

	big=$($BUSYBOX cat $LOGICAL_CORE | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$getBigCluster'}')
	little=$($BUSYBOX cat $LOGICAL_CORE | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $'$getLittleCluster'}')

	$BUSYBOX printf "$big\n$little" > $CORE_GETTER
	
	getBig=$($BUSYBOX cat $CORE_GETTER | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $1}')
	getLittle=$($BUSYBOX cat $CORE_GETTER | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $2}')

	# This is some dirty getter of inverted cluster
	# for now works well
	if [ $getBig -gt $getLittle ]; then
		littleCoresCount=$((getBig))
		bigCoresCount=$((real_core_count-getBig));
	else
		littleCoresCount=$((real_core_count-getLittle))
		bigCoresCount=$((getLittle));
	fi
	
	echo "$bigCoresCount" > $BIG_CORES_COUNT
	echo "$littleCoresCount" > $LITTLE_CORES_COUNT

else
	$BUSYBOX cat $LOGICAL_CORE | $BUSYBOX tr ' ' '\n' | $BUSYBOX sort -n -r | $BUSYBOX uniq > $CORE_GETTER
	
fi

unset logicalCoresListSize; unset uniqueFreqListSize; unset prime; unset big; unset little; unset firtsHighestFreq; unset secondHighestFreq; unset thirdHighestFreq; unset getPrimeCluster; unset getBigCluster; unset getLittleCluster
sleep 0.5

}

getCPUcoreCount
getMinAndMaxFreq
getMinFreqList
getMaxFreqList
logicalCores
getUniqueFreq
coreGetter

exit 0;