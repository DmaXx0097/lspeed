#!/system/bin/sh
# This is a part of L Speed
# cpuset tuner

########
#PATHS #
########
# Path where logs and setup is stored
LSPEED_DATA_DIR=/data/lspeed
LOG_DIR=$LSPEED_DATA_DIR/log
LOG=$LOG_DIR/main_log.log

# Setup paths
SETUP_DIR=$LSPEED_DATA_DIR/setup

# Path for executables and busybox
LSPEED=/system/etc/lspeed
BINARY_DIR=$LSPEED/binary
BUSYBOX=$BINARY_DIR/busybox
CPU_DETECT=$BINARY_DIR/cpu_detect

# cpu_detect output files
CPU_DETECT_DATA_DIR=$SETUP_DIR/cpu_detect
CPU_CORE_COUNT=$CPU_DETECT_DATA_DIR/cpu_core_count
REAL_CPU_CORE_COUNT=$CPU_DETECT_DATA_DIR/real_cpu_core_count
CORE_GETTER=$CPU_DETECT_DATA_DIR/core_getter

sendToLog() {
timeZone=$(getprop persist.sys.timezone)
printDate=$(TZ="$timeZone" $BUSYBOX date +"%H:%M:%S:%3N %d-%m-%Y")

echo "[$printDate] $1" >> $LOG
}

write() {
	#chmod 0644 "$1"
    echo "$2" > "$1"
}

# Starting cpu_detect
sendToLog "Starting CPU detect...";
sh $CPU_DETECT
	
core_getter_list_size=$($BUSYBOX cat $CORE_GETTER | $BUSYBOX tr '\n' ' ' | $BUSYBOX wc -w)
core_count=$($BUSYBOX cat $CPU_CORE_COUNT)
real_core_count=$($BUSYBOX cat $REAL_CPU_CORE_COUNT)	

if [ "$core_getter_list_size" -eq 3 ]; then
	getPrime=$($BUSYBOX cat $CORE_GETTER | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $1}')
	getBig=$($BUSYBOX cat $CORE_GETTER | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $2}')
	getLittle=$($BUSYBOX cat $CORE_GETTER | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $3}')
	
	# This shows real numbers, for usage we should use n-1
	# e.g. CPU have 4 LITTLE(0-3) and 3 BIG (4-6) and 1 PRIME (7-7)
	littleCoresCount=$((getBig))
	bigCoresCount=$((getPrime-getBig));
	primeCoresCount=$((real_core_count-getPrime));
	
	sendToLog "Setting up cpuset for $littleCoresCount(0-$((getBig-1))) LITTLE CPU cores, $bigCoresCount($getBig-$((getPrime-1))) BIG CPU cores and $primeCoresCount($getPrime-$core_count) PRIME CPU cores"
	
	# Setting up cpuset based on profiles
	if [ "$1" = "1" ]; then
		# 0-1 2-5 6-9
		if [ $littleCoresCount -eq 2 ] && [ $bigCoresCount -eq 4 ] && [ $primeCoresCount -eq 4 ]; then
			foreground="0-4"
			topApp="0-5"
			background="0-1"
			systemBackround="0-1"
			
			validConfig=true
			
		# 0-3 4-5 6-7
		elif [ $littleCoresCount -eq 4 ] && [ $bigCoresCount -eq 2 ] && [ $primeCoresCount -eq 2 ]; then
			foreground="0-4"
			topApp="0-5"
			background="0-2"
			systemBackround="0-3"
			
			validConfig=true
			
		# 0-3 4-6 7
		elif [ $littleCoresCount -eq 4 ] && [ $bigCoresCount -eq 3 ] && [ $primeCoresCount -eq 1 ]; then
			foreground="0-3"
			topApp="0-4"
			background="0-2"
			systemBackround="0-3"
			
			validConfig=true
		else
			sendToLog "Cannot set cpuset for this CPU configuration"
			
			validConfig=false
		fi
	elif [ "$1" = "2" ]; then
		# 0-1 2-5 6-9
		if [ $littleCoresCount -eq 2 ] && [ $bigCoresCount -eq 4 ] && [ $primeCoresCount -eq 4 ]; then
			foreground="0-4"
			topApp="0-5"
			background="0-1"
			systemBackround="0-1"
			
			validConfig=true
			
		# 0-3 4-5 6-7
		elif [ $littleCoresCount -eq 4 ] && [ $bigCoresCount -eq 2 ] && [ $primeCoresCount -eq 2 ]; then
			foreground="0-5"
			topApp="0-6"
			background="0-2"
			systemBackround="0-3"
			
			validConfig=true
			
		# 0-3 4-6 7
		elif [ $littleCoresCount -eq 4 ] && [ $bigCoresCount -eq 3 ] && [ $primeCoresCount -eq 1 ]; then
			foreground="0-5"
			topApp="0-2,4-6"
			background="0-2"
			systemBackround="0-3"
			
			validConfig=true
		else
			sendToLog "Cannot set cpuset for this CPU configuration"
			
			validConfig=false
		fi
	elif [ "$1" = "3" ]; then
		# 0-1 2-5 6-9
		if [ $littleCoresCount -eq 2 ] && [ $bigCoresCount -eq 4 ] && [ $primeCoresCount -eq 4 ]; then
			foreground="0-8"
			topApp="0-9"
			background="0-1"
			systemBackround="0-1"
			
			validConfig=true
			
		# 0-3 4-5 6-7
		elif [ $littleCoresCount -eq 4 ] && [ $bigCoresCount -eq 2 ] && [ $primeCoresCount -eq 2 ]; then
			foreground="0-6"
			topApp="0-7"
			background="0-2"
			systemBackround="0-3"
			
			validConfig=true
			
		# 0-3 4-6 7
		elif [ $littleCoresCount -eq 4 ] && [ $bigCoresCount -eq 3 ] && [ $primeCoresCount -eq 1 ]; then
			foreground="0-6"
			topApp="0-7"
			background="0-2"
			systemBackround="0-3"
			
			validConfig=true
		else
			sendToLog "Cannot set cpuset for this CPU configuration"
			
			validConfig=false
		fi
	fi
	
elif [ "$core_getter_list_size" -eq 2 ]; then
	getBig=$($BUSYBOX cat $CORE_GETTER | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $1}')
	getLittle=$($BUSYBOX cat $CORE_GETTER | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $2}')

	# This shows real numbers, for usage we should use n-1
	# e.g. CPU have 6 LITTLE(0-5) and 2 BIG (6-7)
	littleCoresCount=$((getBig))
	bigCoresCount=$((real_core_count-getBig));
		
	sendToLog "Setting up cpuset for $littleCoresCount(0-$((getBig-1))) LITTLE CPU cores and $bigCoresCount($getBig-$core_count) BIG CPU cores"

	# Setting up cpuset based on profiles
	if [ "$1" = "1" ]; then
		# 0-1 2-3
		if [ $littleCoresCount -eq 2 ] && [ $bigCoresCount -eq 2 ]; then
			foreground="0-1"
			topApp="0-2"
			background="0-1"
			systemBackround="0-1"
			
			validConfig=true
			
		# 0-3 4-5
		elif [ $littleCoresCount -eq 4 ] && [ $bigCoresCount -eq 2 ]; then
			foreground="0-2"
			topApp="0-4"
			background="0-2"
			systemBackround="0-3"	
			
			validConfig=true
			
		# 0-3 4-7
		elif [ $littleCoresCount -eq 4 ] && [ $bigCoresCount -eq 4 ]; then
			foreground="0-3"
			topApp="0-5"
			background="0-2"
			systemBackround="0-3"
			
			validConfig=true
			
		# 0-5 6-7
		elif [ $littleCoresCount -eq 6 ] && [ $bigCoresCount -eq 2 ]; then
			foreground="0-4"
			topApp="0-3,6"
			background="0-4"
			systemBackround="0-5"
			
			validConfig=true
		else
			sendToLog "Cannot set cpuset for this CPU configuration"
			
			validConfig=false
		fi
	elif [ "$1" = "2" ]; then
		# 0-1 2-3
		if [ $littleCoresCount -eq 2 ] && [ $bigCoresCount -eq 2 ]; then
			foreground="0-1"
			topApp="0-3"
			background="0-1"
			systemBackround="0-1"
			
			validConfig=true
			
		# 0-3 4-5
		elif [ $littleCoresCount -eq 4 ] && [ $bigCoresCount -eq 2 ]; then
			foreground="0-3"
			topApp="0-5"
			background="0-2"
			systemBackround="0-3"	
			
			validConfig=true
			
		# 0-3 4-7
		elif [ $littleCoresCount -eq 4 ] && [ $bigCoresCount -eq 4 ]; then
			foreground="0-2,4-5"
			topApp="0-6"
			background="0-2"
			systemBackround="0-3"
			
			validConfig=true
			
		# 0-5 6-7
		elif [ $littleCoresCount -eq 6 ] && [ $bigCoresCount -eq 2 ]; then
			foreground="0-3,7"
			topApp="0-6"
			background="0-4"
			systemBackround="0-5"
			
			validConfig=true
		else
			sendToLog "Cannot set cpuset for this CPU configuration"
			
			validConfig=false
		fi
	elif [ "$1" = "3" ]; then
		# 0-1 2-3
		if [ $littleCoresCount -eq 2 ] && [ $bigCoresCount -eq 2 ]; then
			foreground="0-2"
			topApp="0-3"
			background="0-1"
			systemBackround="0-1"
			
			validConfig=true
			
		# 0-3 4-5
		elif [ $littleCoresCount -eq 4 ] && [ $bigCoresCount -eq 2 ]; then
			foreground="0-4"
			topApp="0-5"
			background="0-2"
			systemBackround="0-3"

			validConfig=true
			
		# 0-3 4-7
		elif [ $littleCoresCount -eq 4 ] && [ $bigCoresCount -eq 4 ]; then
			foreground="0-6"
			topApp="0-7"
			background="0-2"
			systemBackround="0-3"
			
			validConfig=true
			
		# 0-5 6-7
		elif [ $littleCoresCount -eq 6 ] && [ $bigCoresCount -eq 2 ]; then
			foreground="0-6"
			topApp="0-7"
			background="0-4"
			systemBackround="0-5"
			
			validConfig=true
		else
			sendToLog "Cannot set cpuset for this CPU configuration"
			
			validConfig=false
		fi
	fi
else 
	getRegular=$($BUSYBOX cat $CORE_GETTER | $BUSYBOX tr '\n' ' ' | $BUSYBOX awk '{print $1}')
		
	sendToLog "Setting up cpuset for $real_core_count REGULAR CPU cores"
		
	# Setting up cpuset based on profiles
	if [ "$1" = "1" ]; then
		# 0-3
		if [ "$real_core_count" -eq 4 ]; then
			foreground="0-1"
			topApp="0-3"
			background="0-1"
			systemBackround="0-2"
			
			validConfig=true
			
		# 0-5
		elif [ "$real_core_count" -eq 6 ]; then
			foreground="0-3"
			topApp="0-4"
			background="0-2"
			systemBackround="0-3"
			
			validConfig=true
			
		# 0-7
		elif [ "$real_core_count" -eq 8 ]; then
			foreground="0-5"
			topApp="0-6"
			background="0-3"
			systemBackround="0-4"
			
			validConfig=true
			
		# 0-9
		elif [ "$real_core_count" -eq 10 ]; then
			foreground="0-5"
			topApp="0-6"
			background="0-3"
			systemBackround="0-4"
			
			validConfig=true
		else
			sendToLog "Cannot set cpuset for this CPU configuration"
			
			validConfig=false
		fi
		
	elif [ "$1" = "2" ]; then
		# 0-3
		if [ "$real_core_count" -eq 4 ]; then
			foreground="0-1"
			topApp="0-4"
			background="0-1"
			systemBackround="0-2"
			
			validConfig=true
			
		# 0-5
		elif [ "$real_core_count" -eq 6 ]; then
			foreground="0-3"
			topApp="0-4"
			background="0-2"
			systemBackround="0-3"
			
			validConfig=true
			
		# 0-7
		elif [ "$real_core_count" -eq 8 ]; then
			foreground="0-5"
			topApp="0-6"
			background="0-3"
			systemBackround="0-4"
			
			validConfig=true
			
		# 0-9
		elif [ "$real_core_count" -eq 10 ]; then
			foreground="0-7"
			topApp="0-8"
			background="0"
			systemBackround="0-2"
			
			validConfig=true
		else
			sendToLog "Cannot set cpuset for this CPU configuration"
			
			validConfig=false
		fi
		
	elif [ "$1" = "3" ]; then
		# 0-3
		if [ "$real_core_count" -eq 4 ]; then
			foreground="0-2"
			topApp="0-3"
			background="0-1"
			systemBackround="0-2"
			
			validConfig=true
			
		# 0-5
		elif [ "$real_core_count" -eq 6 ]; then
			foreground="0-4"
			topApp="0-5"
			background="0-2"
			systemBackround="0-3"
			
			validConfig=true
			
		# 0-7
		elif [ "$real_core_count" -eq 8 ]; then
			foreground="0-6"
			topApp="0-7"
			background="0-4"
			systemBackround="0-5"
			
			validConfig=true
			
		# 0-9
		elif [ "$real_core_count" -eq 10 ]; then
			foreground="0-8"
			topApp="0-9"
			background="0-4"
			systemBackround="0-5"
			
			validConfig=true
		else
			sendToLog "Cannot set cpuset for this CPU configuration"
			
			validConfig=false
		fi
	fi
fi

if [ $validConfig = true ]; then
	# update cpuset now that processors are up
	# Foreground should contain most cores
	if [ -e /dev/cpuset/foreground/cpus ]; then
		write /dev/cpuset/foreground/cpus "$foreground"
		sendToLog "cpuset for foreground set: $foreground"
	fi

	# top-app usualy all the cpus
	if [ -e /dev/cpuset/top-app/cpus ]; then
		write /dev/cpuset/top-app/cpus "$topApp"
		sendToLog "cpuset for top-app set: $topApp"
	fi

	# background contains a small subset so lower cores as possible
	if [ -e /dev/cpuset/background/cpus ]; then
		write /dev/cpuset/background/cpus "$background"
		sendToLog "cpuset for background set: $background"
	fi

	# add system-background cpuset, a new cpuset for system services
	# that should not run on larger cores
	# system-background is for system tasks that should only run on
	# little cores, not on bigs to be used only by init
	# so we are using about the half of the cpu cores
	if [ -e /dev/cpuset/system-background/cpus ]; then
		write /dev/cpuset/system-background/cpus "$systemBackround"
		sendToLog "cpuset for system-background set: $systemBackround"
	fi
fi
